<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Rootavish Files</title>
    <atom:link href="http://localhost:8080/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://localhost:8080</link>
    <description>Set up for and currently being used exclsively for doing weekly write ups as a GSoC student for ScrapingHub</description>
    <pubDate>Fri, 24 Jun 2016 05:30:00 +0630</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Midterm Evaluations</title>
      <link>http://localhost:8080/articles/midterm-evaluation/</link>
      <pubDate>Fri, 24 Jun 2016 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/midterm-evaluation/</guid>
      <author></author>
      <description>&lt;h3 id=&quot;what-s-done&quot;&gt;What’s done&lt;/h3&gt;
&lt;p&gt;In the time that has passed since I last posted one of these, I managed to get a prototype of scrapy to work using the new Signals API. This introduced two very significant API changes into Scrapy.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All Signals now need to be objects of the &lt;code&gt;scrapy.dispatch.Signal&lt;/code&gt; class instead of the generic python &lt;code&gt;object&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;All signal handlers must now receive &lt;code&gt;**kwargs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first change would not affect the existing extensions/3^rd party plugins much since declaring new signals is not something for the most part extensions do, and using &lt;code&gt;PyDispatcher&lt;/code&gt; to call the signals instead of the &lt;code&gt;SignalManager&lt;/code&gt; class has long been deprecated in Scrapy. To accomodate this, the Scrapy &lt;code&gt;SignalManager&lt;/code&gt; has not yet been phased out and would still be functional, although possibly deprecated depending on how the performance benchmarks work out, and whether avoiding the overhead for the method calls is required.  &lt;/p&gt;
&lt;p&gt;The second of these changes however, affects the majority of these extensions and requires that we accomodate in someway. The solution required accomodating the &lt;code&gt;RobustApply&lt;/code&gt; method of PyDispatcher in Scrapy, this method however would considerably affect the performance of the module, and so in order to have the faster signals one would be required to use handlers with keyword arguments.  &lt;/p&gt;
&lt;p&gt;The API was also modified to accomodate twisted &lt;code&gt;deferred&lt;/code&gt; objects to be returned, and the error handling changed to use the &lt;code&gt;Failure&lt;/code&gt; class from &lt;code&gt;twisted.deferred&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;The new module has also been unit tested for the most part, with some tests borrowed from Django since they’re the original authors of this signals API.
I’m currently working on the benchmark suite, writing spiders that use non-standard signals and calls to test the performance. Eariler, signaling through &lt;code&gt;send_catch_log&lt;/code&gt; used to be the biggest bottleneck requiring 5X the time required for HTML parsing. Any improvements we can do on that, the better although ideally I would like if we could make it so that signals are no longer the bottleneck to the crawling.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt; The following section is under construction. &lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;what-needs-to-be-done&quot;&gt;What needs to be done&lt;/h3&gt;
&lt;p&gt;Following the midterms, the highest priority would be to complete the bechmark suite so we know the viability of the approach we have used thus far and where to proceed from here. In case the results obtained are satisfactory, we shall then continue to make backward compatibility fixes and re-writing algortihms that are still not as efficient as they can be and look to maximize performance. We can continue on to provide full backward compatibility with object() like signals, however that would come with the trade-off that the performance of them would be more or less same as that of what was previously achieveable from the API.  &lt;/p&gt;
&lt;p&gt;Another major requirement would be for me to write good documentation of these parts, since these are essential to anybody writing an extension. We would also need to be on the lookout for regressions, if any.&lt;/p&gt;
&lt;p&gt;~ Avishkar&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Rewriting Scrapy Signals, Part I</title>
      <link>http://localhost:8080/articles/rewriting-scrapy-signals/</link>
      <pubDate>Fri, 10 Jun 2016 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/rewriting-scrapy-signals/</guid>
      <author></author>
      <description>&lt;p&gt;In this report, I shall present a brief summary of the work done upto this point. To iterate, the end goal of the project is to improve the efficiency
of Scrapy’s signaling API. For this purpose the idea was to use Django’s signaling mechanism which claims to make the signals 90% faster. Consequently, according to plan the first step was to port &lt;code&gt;django.dispatch&lt;/code&gt;, modify it to our needs and create the &lt;code&gt;scrapy.dispatch&lt;/code&gt;. About a week and a half was spent on that front in first understanding the way that library is written, and what would changes needed to go into making the same work with Scrapy, and then actually making those changes. &lt;code&gt;django.dispatch&lt;/code&gt; refactored much of the code of &lt;code&gt;PyDispatcher&lt;/code&gt; into a &lt;code&gt;Signal&lt;/code&gt; class. It also introduced a caching mechanism for receivers and introduced the &lt;code&gt;weakref&lt;/code&gt; module into the code.    &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;send_robust&lt;/code&gt; method was used as a starting point for the &lt;code&gt;send_robust_deferred&lt;/code&gt; call to incorporate methods returning deferred calls, this was required for re-writing the &lt;code&gt;scrapy.utils.signal&lt;/code&gt; module which has the &lt;code&gt;send_catch_log&lt;/code&gt; and &lt;code&gt;send_catch_log_deferred&lt;/code&gt; modules. These methods are relative inefficient and tend to bottleneck the scraping process, and were one of the reasons behind the re-write of signals. The next step involved was to re-define the core signals at the heart of Scrapy as instances of &lt;code&gt;scrapy.Signal&lt;/code&gt; instead of generic &lt;code&gt;object&lt;/code&gt;class. The &lt;code&gt;signalManager&lt;/code&gt; class also needed to be changed however the API of the same was kept consistent for backward compatibiliy.&lt;/p&gt;
&lt;p&gt;You can track the progress and check out how the project is coming along &lt;a href=&quot;https://github.com/rootavish/scrapy/tree/signal-rewrite&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://github.com/scrapy/scrapy/pull/2030&quot;&gt;here&lt;/a&gt; although I must admit I do not push frequently and most commits are either local or small test pieces written outside the mainline code. I shall however, be pushing a working prototype by the end of Monday so that’s there to look out for.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Community Bonding</title>
      <link>http://localhost:8080/articles/community-bonding/</link>
      <pubDate>Sun, 22 May 2016 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/community-bonding/</guid>
      <author></author>
      <description>&lt;p&gt;Hey there, this is the first in the series of posts aimed at documenting my experience as a GSoC 2016 student for regular reporting to the org,
and for my own reference to have something to look back on in retrospect. For the first post, let me start with spouting off a little about myself,
and then I’ll talk about how the experience has been to date.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;
I’m a(or rather was) a final year student of Computer Engineering at a college in New Delhi, and I’ve been a part of the GSoC program back in 2014,
where I worked for &lt;a href=&quot;http://mate-desktop.org&quot;&gt;MATE desktop&lt;/a&gt;. For the last year or so, I’ve been dabbling in data science and machine learning, and came
to know of Scrapy when I used it for one such project early on to scrape opinions from an e-commerce site. Fast forward a year and casually browsing through
PSF’s list of GSoC organizations I got to know that these guys were also participating and decided to give it a shot. Given how hectic the schedule was for me back
in February, I would be lying if I said that the reason for my selection was me being some sort of a big-shot programmer who came in all guns blazing. I approached
this as passively as one possibly could, it was due to the efforts of the ScrapingHub suborg admin Paul who showed interst in my proposal, gave me an interview
and put me to work on a bug which also made me familiar with the actual inner workings of Scrapy that I was able to gain footing on the project.  &lt;/p&gt;
&lt;p&gt;My project for this summer is going to deal with re-factoring the Scrapy signaling API, in an effort to move away from the PyDispatcher library which would greatly
enchance the performance of signals. Django moved away from PyDispatcher in 2001, and they reportedly observed an increase of upto 90% in efficiency. I intend to build
off their work and assume we would see similar results in Scrapy.  &lt;/p&gt;
&lt;p&gt;The Scrapy community are a really active lot, and my “community bonding” started just a couple days into the announcement of me being selected for the project, which is good
because I’ve had exams for the past couple of weeks or so and was AFK for a major part of them(of course informing my mentors about the same first). I had a video chat with my
mentor Jakob where we figured out how reporting etc. would work for the summer, our next chat is scheduled for the 24^th, 25^th where we shall discuss how the actual implementation
of the project will be and what plans I have for the same. I also finalised the work on a bug I was working on and had submitted in the form of a patch as a part of my proposal.
The Scrapy community is really responsive, and I’m honored to be a part of it and to be working with all the people here. I hope my work is up to their standards at the end of this.
Since there is not much Technical content to write about at this point, with the coding period having not yet started so we’ll keep this one short, I’ll bore you with the
technical details in the next one. Thanks for reading, the next post will go up on Sunday the 28th. Signing off.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>The First Post</title>
      <link>http://localhost:8080/articles/first-post/</link>
      <pubDate>Sat, 30 Apr 2016 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/first-post/</guid>
      <author></author>
      <description>&lt;p&gt;This blog will contain weekly reports I write as a GSoC student for Scrapinghub.&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>